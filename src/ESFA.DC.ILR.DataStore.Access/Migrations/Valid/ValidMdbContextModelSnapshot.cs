// <auto-generated />
using System;
using ESFA.DC.ILR.DataStore.Access;
using EntityFrameworkCore.Jet.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ESFA.DC.ILR.DataStore.Access.Migrations.Valid
{
    [DbContext(typeof(ValidMdbContext))]
    partial class ValidMdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.AppFinRecord", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<int>("AppFinRecord_Id");

                    b.Property<int>("AFinAmount");

                    b.Property<int>("AFinCode");

                    b.Property<DateTime>("AFinDate")
                        .HasColumnType("date");

                    b.Property<string>("AFinType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("AimSeqNumber");

                    b.Property<string>("LearnRefNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "AppFinRecord_Id");

                    b.HasIndex("UKPRN", "LearnRefNumber", "AimSeqNumber", "AFinType")
                        .HasName("IX_Valid_AppFinRecord");

                    b.ToTable("Valid_AppFinRecord","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.CollectionDetail", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("Collection")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FilePreparationDate")
                        .HasColumnType("date");

                    b.HasKey("UKPRN", "Collection", "Year");

                    b.ToTable("Valid_CollectionDetails","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ContactPreference", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ContPrefType")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("ContPrefCode");

                    b.HasKey("UKPRN", "LearnRefNumber", "ContPrefType", "ContPrefCode")
                        .HasName("PK_ContactPref");

                    b.HasIndex("LearnRefNumber", "ContPrefType")
                        .HasName("IX_Valid_ContactPreference");

                    b.ToTable("Valid_ContactPreference","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.DPOutcome", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("OutType")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("OutCode");

                    b.Property<DateTime>("OutStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("OutCollDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("OutEndDate")
                        .HasColumnType("date");

                    b.HasKey("UKPRN", "LearnRefNumber", "OutType", "OutCode", "OutStartDate", "OutCollDate");

                    b.ToTable("Valid_DPOutcome","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.EmploymentStatusMonitoring", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateEmpStatApp")
                        .HasColumnType("date");

                    b.Property<string>("ESMType")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int?>("ESMCode");

                    b.HasKey("UKPRN", "LearnRefNumber", "DateEmpStatApp", "ESMType")
                        .HasName("PK__Employme__316BBA3177FA0E58");

                    b.ToTable("Valid_EmploymentStatusMonitoring","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LLDDandHealthProblem", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("LLDDCat");

                    b.Property<long>("LLDDandHealthProblem_ID");

                    b.Property<int?>("PrimaryLLDD");

                    b.HasKey("UKPRN", "LearnRefNumber", "LLDDCat", "LLDDandHealthProblem_ID")
                        .HasName("PK__LLDDandH__CFA94E1CDBFD452F");

                    b.ToTable("Valid_LLDDandHealthProblem","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("ALSCost");

                    b.Property<int?>("Accom");

                    b.Property<string>("AddLine1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AddLine2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AddLine3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AddLine4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CampId")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EngGrade")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int>("Ethnicity");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GivenNames")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("LLDDHealthProb");

                    b.Property<string>("MathGrade")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("NINumber")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int?>("PMUKPRN");

                    b.Property<int?>("PlanEEPHours");

                    b.Property<int?>("PlanLearnHours");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PostcodePrior")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PrevLearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("PrevUKPRN");

                    b.Property<int?>("PriorAttain");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("TelNo")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<double>("ULN")
                        .HasColumnType("double");

                    b.HasKey("UKPRN", "LearnRefNumber")
                        .HasName("PK__Learner__2770A7272800E247");

                    b.ToTable("Valid_Learner","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerDestinationandProgression", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<long>("ULN");

                    b.HasKey("UKPRN", "LearnRefNumber")
                        .HasName("PK__LearnerD__2770A72787FC8583");

                    b.ToTable("Valid_LearnerDestinationAndProgression","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerEmploymentStatus", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateEmpStatApp")
                        .HasColumnType("date");

                    b.Property<string>("AgreeId")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int?>("EmpId");

                    b.Property<int>("EmpStat");

                    b.HasKey("UKPRN", "LearnRefNumber", "DateEmpStatApp")
                        .HasName("PK__LearnerE__7200C4BE58EC6070");

                    b.ToTable("Valid_LearnerEmploymentStatus","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerFAM", b =>
                {
                    b.Property<int>("LearnFAMCode");

                    b.Property<string>("LearnFAMType")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("UKPRN");

                    b.HasKey("LearnFAMCode", "LearnFAMType", "LearnRefNumber", "UKPRN");

                    b.HasIndex("UKPRN", "LearnRefNumber")
                        .HasName("IX_Valid_LearnerFAM");

                    b.ToTable("Valid_LearnerFAM","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHE", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("TTACCOM");

                    b.Property<string>("UCASPERID")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "LearnRefNumber")
                        .HasName("PK__LearnerH__2770A7279C7D6CB5");

                    b.ToTable("Valid_LearnerHE","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHEFinancialSupport", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("FINTYPE");

                    b.Property<int>("FINAMOUNT");

                    b.HasKey("UKPRN", "LearnRefNumber", "FINTYPE")
                        .HasName("PK__LearnerH__09F54B72FB824228");

                    b.ToTable("Valid_LearnerHEFinancialSupport","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("AimSeqNumber");

                    b.Property<DateTime?>("AchDate")
                        .HasColumnType("date");

                    b.Property<int?>("AddHours");

                    b.Property<int>("AimType");

                    b.Property<int>("CompStatus");

                    b.Property<string>("ConRefNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("DelLocPostCode")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("EPAOrgID")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int?>("EmpOutcome");

                    b.Property<int>("FundModel");

                    b.Property<int?>("FworkCode");

                    b.Property<string>("LSDPostcode")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LearnActEndDate")
                        .HasColumnType("date");

                    b.Property<string>("LearnAimRef")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<DateTime>("LearnPlanEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LearnStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("OrigLearnStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("OtherFundAdj");

                    b.Property<string>("OutGrade")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int?>("Outcome");

                    b.Property<int?>("PHours");

                    b.Property<int?>("PartnerUKPRN");

                    b.Property<int?>("PriorLearnFundAdj");

                    b.Property<int?>("ProgType");

                    b.Property<int?>("PwayCode");

                    b.Property<string>("SWSupAimId")
                        .HasMaxLength(36)
                        .IsUnicode(false);

                    b.Property<int?>("StdCode");

                    b.Property<int?>("WithdrawReason");

                    b.HasKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasName("PK__Learning__0C29443A14B79EFD");

                    b.ToTable("Valid_LearningDelivery","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryFAM", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<int>("LearningDeliveryFAM_Id");

                    b.Property<int>("AimSeqNumber");

                    b.Property<string>("LearnDelFAMCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LearnDelFAMDateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LearnDelFAMDateTo")
                        .HasColumnType("date");

                    b.Property<string>("LearnDelFAMType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("LearnRefNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "LearningDeliveryFAM_Id");

                    b.HasIndex("UKPRN", "LearnRefNumber", "AimSeqNumber", "LearnDelFAMType", "LearnDelFAMDateFrom")
                        .HasName("IX_Valid_LearningDeliveryFAM");

                    b.HasIndex("LearnRefNumber", "AimSeqNumber", "LearnDelFAMCode", "LearnDelFAMDateFrom", "LearnDelFAMDateTo", "UKPRN", "LearnDelFAMType")
                        .HasName("IX_Valid_LearningDeliveryFAM_UKPRN_FamType");

                    b.ToTable("Valid_LearningDeliveryFAM","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryHE", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("AimSeqNumber");

                    b.Property<string>("DOMICILE")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int?>("ELQ");

                    b.Property<int>("FUNDCOMP");

                    b.Property<int>("FUNDLEV");

                    b.Property<int?>("GROSSFEE");

                    b.Property<string>("HEPostCode")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<int>("MODESTUD");

                    b.Property<int>("MSTUFEE");

                    b.Property<int?>("NETFEE");

                    b.Property<string>("NUMHUS")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<decimal?>("PCFLDCS")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal?>("PCOLAB")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal?>("PCSLDCS")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal?>("PCTLDCS")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<string>("QUALENT3")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int?>("SEC");

                    b.Property<int?>("SOC2000");

                    b.Property<int>("SPECFEE");

                    b.Property<string>("SSN")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.Property<decimal?>("STULOAD")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<int>("TYPEYR");

                    b.Property<string>("UCASAPPID")
                        .HasMaxLength(9)
                        .IsUnicode(false);

                    b.Property<int>("YEARSTU");

                    b.HasKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasName("PK__Learning__0C29443A745B97AB");

                    b.ToTable("Valid_LearningDeliveryHE","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryWorkPlacement", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("AimSeqNumber");

                    b.Property<DateTime>("WorkPlaceStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("WorkPlaceEmpId");

                    b.Property<DateTime?>("WorkPlaceEndDate")
                        .HasColumnType("date");

                    b.Property<int?>("WorkPlaceHours");

                    b.Property<int>("WorkPlaceMode");

                    b.HasKey("UKPRN", "LearnRefNumber", "AimSeqNumber", "WorkPlaceStartDate");

                    b.HasIndex("UKPRN", "LearnRefNumber", "AimSeqNumber", "WorkPlaceStartDate", "WorkPlaceMode")
                        .HasName("IX_Valid_LearningDeliveryWorkPlacement");

                    b.ToTable("Valid_LearningDeliveryWorkPlacement","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningProvider", b =>
                {
                    b.Property<int>("UKPRN");

                    b.HasKey("UKPRN")
                        .HasName("PK__Learning__50F26B71C00B9BD1");

                    b.ToTable("Valid_LearningProvider","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ProviderSpecDeliveryMonitoring", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int>("AimSeqNumber");

                    b.Property<string>("ProvSpecDelMonOccur")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ProvSpecDelMon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "LearnRefNumber", "AimSeqNumber", "ProvSpecDelMonOccur")
                        .HasName("PK__Provider__9F5C508501D87521");

                    b.ToTable("Valid_ProviderSpecDeliveryMonitoring","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ProviderSpecLearnerMonitoring", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("LearnRefNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("ProvSpecLearnMonOccur")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ProvSpecLearnMon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "LearnRefNumber", "ProvSpecLearnMonOccur")
                        .HasName("PK__Provider__63E551EA945F4643");

                    b.ToTable("Valid_ProviderSpecLearnerMonitoring","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.Source", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("ComponentSetVersion")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ProtectiveMarking")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReferenceData")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Release")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SoftwarePackage")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SoftwareSupplier")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("UKPRN");

                    b.ToTable("Valid_Source","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.SourceFile", b =>
                {
                    b.Property<int>("UKPRN");

                    b.Property<string>("SourceFileName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FilePreparationDate")
                        .HasColumnType("date");

                    b.Property<string>("Release")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("SerialNo")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SoftwarePackage")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SoftwareSupplier")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("UKPRN", "SourceFileName");

                    b.HasIndex("SourceFileName")
                        .HasName("IX_Valid_SourceFile");

                    b.ToTable("Valid_SourceFile","Valid");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.AppFinRecord", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", "LearningDelivery")
                        .WithMany("AppFinRecords")
                        .HasForeignKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasConstraintName("FK_AppFinRecord_LearningDelivery");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ContactPreference", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("ContactPreferences")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_ContactPreference_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.DPOutcome", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerDestinationandProgression", "LearnerDestinationandProgression")
                        .WithMany("DPOutcomes")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_DPOutcome_LearnerDestinationandProgression");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LLDDandHealthProblem", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("LLDDandHealthProblems")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LLDDandHealthProblem_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerEmploymentStatus", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("LearnerEmploymentStatuses")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LearnerEmploymentStatus_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerFAM", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("LearnerFAMs")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LearnerFAM_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHE", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithOne("LearnerHE")
                        .HasForeignKey("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHE", "UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LearnerHE_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHEFinancialSupport", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearnerHE", "LearnerHE")
                        .WithMany("LearnerHEFinancialSupports")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LearnerHEFinancialSupport_LearnerHE");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("LearningDeliveries")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_LearningDelivery_Learner");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryFAM", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", "LearningDelivery")
                        .WithMany("LearningDeliveryFAMs")
                        .HasForeignKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasConstraintName("FK_LearningDeliveryFAM_LearningDelivery");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryHE", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", "LearningDelivery")
                        .WithOne("LearningDeliveryHE")
                        .HasForeignKey("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryHE", "UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasConstraintName("FK_LearningDeliveryHE_LearningDelivery");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDeliveryWorkPlacement", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", "LearningDelivery")
                        .WithMany("LearningDeliveryWorkPlacements")
                        .HasForeignKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasConstraintName("FK_LearningDeliveryWorkPlacement_LearningDelivery");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ProviderSpecDeliveryMonitoring", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.LearningDelivery", "LearningDelivery")
                        .WithMany("ProviderSpecDeliveryMonitorings")
                        .HasForeignKey("UKPRN", "LearnRefNumber", "AimSeqNumber")
                        .HasConstraintName("FK_ProviderSpecDeliveryMonitoring_LearningDelivery");
                });

            modelBuilder.Entity("ESFA.DC.ILR1920.DataStore.EF.Valid.ProviderSpecLearnerMonitoring", b =>
                {
                    b.HasOne("ESFA.DC.ILR1920.DataStore.EF.Valid.Learner", "Learner")
                        .WithMany("ProviderSpecLearnerMonitorings")
                        .HasForeignKey("UKPRN", "LearnRefNumber")
                        .HasConstraintName("FK_ProviderSpecLearnerMonitoring_Learner");
                });
#pragma warning restore 612, 618
        }
    }
}
